/**
 * @fileoverview Firestore Security Rules for the Attendance Tracking Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles, ownership, and administrative privileges.
 * It enforces strict access control to prevent unauthorized data modification and exposure.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /attendance_records/{attendanceRecordId}: Stores employee attendance records, accessible for reading by all, but writable only by an admin role.
 * - /grace_settings/{graceSettingId}: Stores grace period settings, accessible for reading by all, but writable only by an admin role.
 * - /audit_logs/{auditLogId}: Stores logs of audit executions, accessible for reading by all, but writable only by an admin role.
 * - /email_logs/{emailLogId}: Stores logs of sent emails, accessible for reading by all, but writable only by an admin role.
 * - /auto_audit_settings/auto_audit_config: Stores the configuration for auto-audits, accessible for reading by all, but writable only by an admin role.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Listing of users is disallowed to prevent enumeration.
 * - Attendance Records, Grace Settings, Audit Logs, Email Logs, and Auto Audit Settings are readable by anyone but only writable by admins.
 * - Admin role is determined by the email address sakthi@hezee.co.in
 *
 * Denormalization for Authorization:
 * - The User document contains a `role` field. This allows central control, but no data is denormalized onto other documents.  If collection-group queries are needed, consider role denormalization.
 *
 * Structural Segregation:
 * - No structural segregation is used. All data for an entity lives in a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profile data.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read/write their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot be created by someone else.
     * @deny (get, update, delete) User with ID 'user123' cannot be read/written by someone else.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the document and it exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      // Prevent listing of all users.
      allow list: if false;

      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isOwner(userId);

      // Allow a user to update their own profile. The uid is immutable.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own profile if it exists.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance records. Anyone can read, but only admins can create, update, or delete.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) Any user can read attendance records.
     * @allow (create, update, delete) User with sakthi@hezee.co.in email can create, update, or delete attendance records.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete attendance records.
     * @principle Restricts write access to attendance records to administrators.
     */
    match /attendance_records/{attendanceRecordId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'sakthi@hezee.co.in';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to grace period settings. Anyone can read, but only admins can create, update, or delete.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) Any user can read grace settings.
     * @allow (create, update, delete) User with sakthi@hezee.co.in email can create, update, or delete grace settings.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete grace settings.
     * @principle Restricts write access to grace settings to administrators.
     */
    match /grace_settings/{graceSettingId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'sakthi@hezee.co.in';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to audit logs. Anyone can read, but only admins can create, update, or delete.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) Any user can read audit logs.
     * @allow (create, update, delete) User with sakthi@hezee.co.in email can create, update, or delete audit logs.
     * @deny (create, update, or delete) Non-admin users cannot create, update, or delete audit logs.
     * @principle Restricts write access to audit logs to administrators.
     */
    match /audit_logs/{auditLogId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'sakthi@hezee.co.in';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to email logs. Anyone can read, but only admins can create, update, or delete.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) Any user can read email logs.
     * @allow (create, update, delete) User with sakthi@hezee.co.in email can create, update, or delete email logs.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete email logs.
     * @principle Restricts write access to email logs to administrators.
     */
    match /email_logs/{emailLogId} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'sakthi@hezee.co.in';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to auto audit settings. Anyone can read, but only admins can create, update, or delete.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) Any user can read the auto audit settings.
     * @allow (create, update, delete) User with sakthi@hezee.co.in email can create, update, or delete the auto audit settings.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete the auto audit settings.
     * @principle Restricts write access to auto audit settings to administrators.
     */
    match /auto_audit_settings/{auto_audit_config} {
      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'sakthi@hezee.co.in';
      }

      allow get: if true;
      allow list: if false;
      allow create, update, delete: if isAdmin();
    }
  }
}