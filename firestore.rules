/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict, path-based ownership model for a multi-tenant attendance management system.
 *
 * Data Structure:
 * - /clients/{clientId}: Root collection for clients.
 * - /clients/{clientId}/branches/{branchId}: Branches belonging to a client.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}: Employees belonging to a branch.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}: Attendance records for an employee.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}: Leave requests for an employee.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user.
 * - /emailLogs/{emailLogId}: Logs of all sent emails (potentially restricted to admin/system).
 * - /auditLogs/{auditLogId}: Logs of all audit activities (potentially restricted to admin/system).
 *
 * Key Security Decisions:
 * - Path-based ownership is strictly enforced for all data nested under clients.
 * - All subcollections under /clients/{clientId} include denormalized clientId and other relevant IDs to ensure authorization independence.
 * - Listing of collections is generally allowed for owners of that data, unless explicitly restricted.
 * - EmailLogs and AuditLogs are potentially restricted to admin or system accounts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows clients to be created, read, updated and deleted.
     * @path /clients/{clientId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces client-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to branches scoped to a client.
     * @path /clients/{clientId}/branches/{branchId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces branch-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId}/branches/{branchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to employees scoped to a branch and client.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces employee-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to biometric devices scoped to a branch and client.
     * @path /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces biometric device-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to attendance records scoped to an employee, branch and client.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces attendance record-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to leave requests scoped to an employee, branch and client.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces leave request-level access control, requiring authentication for all operations.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to notifications scoped to a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces user-level access control for notifications, requiring authentication for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to email logs. This may need further restriction to admin/system accounts.
     * @path /emailLogs/{emailLogId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces email log-level access control, requiring authentication for all operations. Consider restricting to admin.
     */
    match /emailLogs/{emailLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to audit logs. This may need further restriction to admin/system accounts.
     * @path /auditLogs/{auditLogId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Enforces audit log-level access control, requiring authentication for all operations. Consider restricting to admin.
     */
    match /auditLogs/{auditLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}