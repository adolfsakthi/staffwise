/**
 * @fileoverview Firestore Security Rules for Staffwise Attendance Tracking.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user identity and role.
 * It uses a combination of ownership-based and role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user themselves.
 * - /attendance_records/{attendanceRecordId}: Stores individual attendance records.  Write access is restricted. Read access is public.
 * - /grace_settings/{graceSettingId}: Stores grace time settings.  Write access is restricted. Read access is public.
 * - /audit_logs/{auditLogId}: Stores audit logs.  Write access is restricted. Read access is public.
 * - /email_logs/{emailLogId}: Stores email logs for tracking notifications. Write access is restricted. Read access is public.
 * - /auto_audit_settings/auto_audit_config: Stores the configuration for auto-auditing. Write access is restricted. Read access is public.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the authenticated user can access their own profile.
 * - Generic data like attendance records, audit logs, email logs, auto audit settings, and grace settings can be publicly read.
 * - Write access is limited and should be protected using isAuthorized functions.
 *
 * Denormalization for Authorization:
 *  N/A - Authorization decisions are based on user ID and roles, which are directly available in the `request.auth` context or document paths.
 *
 * Structural Segregation:
 *  The system uses separate collections for user-specific data (/users/{userId}) and public data (other top-level collections).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's ownerId.
     * @param {string} ownerId - The user ID of the resource owner to compare against.
     */
    function isResourceOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's ownerId and if the resource exists.
     * @param {string} ownerId - The user ID of the resource owner to compare against.
     */
    function isExistingOwner(ownerId) {
      return isResourceOwner(ownerId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own profile.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update or delete their own profile.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched UID.
     * @deny (get, list, update, delete) - Other users cannot access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Anyone can read attendance records.
     * @deny (create, update, delete) - No one can create, update, or delete attendance records.
     * @principle Public read access with restricted writes.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines security rules for grace period settings.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) - Anyone can read grace settings.
     * @deny (create, update, delete) - No one can create, update, or delete grace settings.
     * @principle Public read access with restricted writes.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines security rules for audit logs.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) - Anyone can read audit logs.
     * @deny (create, update, delete) - No one can create, update, or delete audit logs.
     * @principle Public read access with restricted writes.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines security rules for email logs.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) - Anyone can read email logs.
     * @deny (create, update, delete) - No one can create, update, or delete email logs.
     * @principle Public read access with restricted writes.
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines security rules for auto-audit settings.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) - Anyone can read the auto-audit settings.
     * @deny (create, update, delete, list) - No one can create, update, delete, or list auto-audit settings.
     * @principle Public read access with restricted writes.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}