/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and general read-only access to other data.
 * @dataStructure
 *   - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 *   - /attendance_records/{attendanceRecordId}: Stores attendance records. Intended to be generally readable. Writes not currently secured.
 *   - /grace_settings/{graceSettingId}: Stores grace period settings. Intended to be generally readable. Writes not currently secured.
 *   - /audit_logs/{auditLogId}: Stores logs of audit executions. Intended to be generally readable. Writes not currently secured.
 *   - /email_logs/{emailLogId}: Stores logs of emails sent. Intended to be generally readable. Writes not currently secured.
 *   - /auto_audit_settings/auto_audit_config: Stores configuration for auto-auditing. Intended to be generally readable. Writes not currently secured.
 * @keySecurityDecisions
 *   - User profiles are private and only accessible to the owning user.
 *   - Other collections (attendance_records, grace_settings, audit_logs, email_logs, auto_audit_settings) are configured for public read access in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles only to the owning user.
     * @path /users/{userId}
     * @allow (create) - User 'NI2s3RRNvCQAU8sgA0vVpKDQNG22' can create their own profile if request.auth.uid == userId.
     * @allow (get) - User 'NI2s3RRNvCQAU8sgA0vVpKDQNG22' can read their own profile.
     * @allow (update) - User 'NI2s3RRNvCQAU8sgA0vVpKDQNG22' can update their own profile.
     * @allow (delete) - User 'NI2s3RRNvCQAU8sgA0vVpKDQNG22' can delete their own profile.
     * @deny (create) - User 'NI2s3RRNvCQAU8sgA0vVpKDQNG22' cannot create a profile for another user ('user_xyz').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Utility function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the requested user ID matches the authenticated user ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Utility function to check if the requested user ID matches the authenticated user ID and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to attendance records. Write access is not secured in this prototype.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get) - Any user can read an attendance record.
     * @allow (list) - Any user can list attendance records.
     * @principle Allows public read access for prototyping.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to grace settings. Write access is not secured in this prototype.
     * @path /grace_settings/{graceSettingId}
     * @allow (get) - Any user can read a grace setting.
     * @allow (list) - Any user can list grace settings.
     * @principle Allows public read access for prototyping.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to audit logs. Write access is not secured in this prototype.
     * @path /audit_logs/{auditLogId}
     * @allow (get) - Any user can read an audit log.
     * @allow (list) - Any user can list audit logs.
     * @principle Allows public read access for prototyping.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to email logs. Write access is not secured in this prototype.
     * @path /email_logs/{emailLogId}
     * @allow (get) - Any user can read an email log.
     * @allow (list) - Any user can list email logs.
     * @principle Allows public read access for prototyping.
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to auto audit settings. Write access is not secured in this prototype.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) - Any user can read the auto audit config.
     * @allow (list) - Any user can list the auto audit config (though there is only one).
     * @principle Allows public read access for prototyping.
     */
    match /auto_audit_settings/{autoAuditSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to devices. Write access is not secured in this prototype.
     * @path /devices
     * @allow (get) - Any user can read the devices.
     * @allow (list) - Any user can list the devices.
     * @principle Allows public read access for prototyping.
     */
    match /devices/{deviceId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}