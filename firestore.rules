/**
 * @fileoverview Firestore Security Rules for the Staffwise Attendance System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict, path-based ownership model for data access. Multi-tenancy is achieved through the top-level `clients` collection.
 *
 * Data Structure:
 * - All data is nested under `/clients/{clientId}`, reflecting a multi-tenant architecture.
 * - Branches, employees, biometric devices, attendance records, and leave requests are organized under their respective client.
 * - Notifications are stored under `/users/{userId}/notifications`.
 * - Audit logs and email logs are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Data consistency enforced for resource creation with path validation.
 * - Write operations are restricted based on ownership, with helper functions for clarity.
 * - Read operations are generally restricted to owners of the path unless otherwise noted.
 * - List operations are secured by checking ownership of the parent resource.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Client and Branch IDs are denormalized into subcollections to avoid costly `get()` calls and enable simpler, more performant security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource owner ID and that the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership and prevents operations on non-existent documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /clients collection.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow Signed-in user (create)
     * @deny Non-signed-in user (create)
     * @principle Enforces client creation by authenticated users.
     */
    match /clients/{clientId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches collection.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}
     * @allow Client owner (create, update, delete)
     * @deny Non-client owner (create, update, delete)
     * @principle Enforces branch management by client owners.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees collection.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow Branch owner (create, update, delete)
     * @deny Non-branch owner (create, update, delete)
     * @principle Enforces employee management by branch owners.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/biometricDevices collection.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow Branch owner (create, update, delete)
     * @deny Non-branch owner (create, update, delete)
     * @principle Enforces biometric device management by branch owners.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords collection.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow Employee owner (create, update, delete)
     * @deny Non-employee owner (create, update, delete)
     * @principle Enforces attendance record management by employee owners.
     */
    match /clients/{clientId}/branches/{branchId}/attendanceRecords/{attendanceRecordId} {
      allow get: if false;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests collection.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow Employee owner (create, update, delete)
     * @deny Non-employee owner (create, update, delete)
     * @principle Enforces leave request management by employee owners.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/notifications collection.
     * @path /databases/{database}/documents/users/{userId}/notifications/{notificationId}
     * @allow User owner (create, update, delete)
     * @deny Non-user owner (create, update, delete)
     * @principle Enforces notification management by user owners.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /emailLogs collection.
     * @path /databases/{database}/documents/emailLogs/{emailLogId}
     * @allow No read or write access for regular users.
     * @deny All access.
     * @principle Restricts access to email logs.
     */
    match /emailLogs/{emailLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /auditLogs collection.
     * @path /databases/{database}/documents/auditLogs/{auditLogId}
     * @allow No read or write access for regular users.
     * @deny All access.
     * @principle Restricts access to audit logs.
     */
    match /auditLogs/{auditLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}