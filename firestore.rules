/**
 * @fileoverview Firestore Security Rules for the Staffwise Attendance System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict, path-based ownership model within a multi-tenant application.
 * Data is primarily accessed and managed within the hierarchical structure of clients, branches, and employees.
 * The rules prioritize security by validating resource ownership at each level of the data hierarchy.
 *
 * Data Structure:
 * The data is organized under the root-level `clients` collection, facilitating multi-tenancy.
 * Each client has multiple branches, and each branch has multiple employees.
 * Subcollections like `attendanceRecords` and `leaveRequests` are nested under their respective employee documents.
 * User-specific notifications are stored under the `users/{userId}` path.
 *
 * Key Security Decisions:
 * - Authorization Independence: Client and branch IDs are denormalized (copied) into subcollections to
 *   avoid costly `get()` operations in security rules, improving performance and simplifying access control.
 * - Path-Based Ownership: Rules are constructed to ensure that only the client, branch, or employee
 *   associated with a given path can create, update, or delete documents within that path.
 * - User-Specific Notifications: Notifications are stored under the `users/{userId}` path to ensure
 *   that only the authenticated user can access their own notifications.
 * - Auditing and Logging: Email logs and audit logs are stored in separate collections with restricted
 *   write access to maintain data integrity.
 * - No Open Writes: The ruleset avoids any write rules using `if true;` to prevent unauthorized data modification.
 * - Data Consistency: Rules enforce data consistency by validating that the path parameters match the
 *   corresponding fields within the document data, ensuring that relationships between documents are maintained.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Allows access to client documents.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (create) - Authenticated user can create a client document with their user ID as the clientId.
     * @deny (create) - Authenticated user attempts to create a client document with a mismatched clientId.
     * @allow (get, list) - Any user can read client documents.
     * @allow (update, delete) - No one can update or delete a client document.
     * @principle Enforces client-level access control, allowing anyone to read but restricts modifications.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == clientId;
      allow update, delete: if false;
    }

    /**
     * @description Allows access to branch documents within a client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}
     * @allow (create) - Authenticated user can create a branch document within a client if they are the client owner.
     * @deny (create) - Authenticated user attempts to create a branch document for a client they don't own.
     * @allow (get, list) - Any user can read branch documents within a client.
     * @allow (update, delete) - No one can update or delete a branch document.
     * @principle Enforces branch-level access control within a client, allowing reads but restricts modifications.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get, list: if true;
      allow create: if isSignedIn() ;
      allow update, delete: if false;
    }

    /**
     * @description Allows access to employee documents within a branch.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) - Authenticated user can create an employee document within a branch if they are the branch owner.
     * @deny (create) - Authenticated user attempts to create an employee document for a branch they don't own.
     * @allow (get, list) - Any user can read employee documents within a branch.
     * @allow (update, delete) - No one can update or delete an employee document.
     * @principle Enforces employee-level access control within a branch, allowing reads but restricts modifications.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows access to biometric device documents within a branch.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) - Authenticated user can create a biometric device document within a branch if they are the branch owner.
     * @deny (create) - Authenticated user attempts to create a biometric device document for a branch they don't own.
     * @allow (get, list) - Any user can read biometric device documents within a branch.
     * @allow (update, delete) - No one can update or delete a biometric device document.
     * @principle Enforces biometric device-level access control within a branch, allowing reads but restricts modifications.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows access to attendance record documents within an employee's record.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) - Authenticated user can create an attendance record document within an employee's record if they are the employee owner.
     * @deny (create) - Authenticated user attempts to create an attendance record document for an employee they don't own.
     * @allow (get, list) - Any user can read attendance record documents within an employee's record.
     * @allow (update, delete) - No one can update or delete an attendance record document.
     * @principle Enforces attendance record-level access control within an employee's record, allowing reads but restricts modifications.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows access to leave request documents within an employee's record.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) - Authenticated user can create a leave request document within an employee's record if they are the employee owner.
     * @deny (create) - Authenticated user attempts to create a leave request document for an employee they don't own.
     * @allow (get, list) - Any user can read leave request documents within an employee's record.
     * @allow (update, delete) - No one can update or delete a leave request document.
     * @principle Enforces leave request-level access control within an employee's record, allowing reads but restricts modifications.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows access to notification documents for a specific user.
     * @path /databases/{database}/documents/users/{userId}/notifications/{notificationId}
     * @allow (create) - Authenticated user can create a notification document for their own user ID.
     * @deny (create) - Authenticated user attempts to create a notification document for a different user ID.
     * @allow (get, list) - Authenticated user can read notification documents for their own user ID.
     * @deny (get, list) - Authenticated user attempts to read notification documents for a different user ID.
     * @allow (update, delete) - Authenticated user can update or delete notification documents for their own user ID.
     * @deny (update, delete) - Authenticated user attempts to update or delete notification documents for a different user ID.
     * @principle Enforces user-level access control for notifications, ensuring that only the owner can manage their own notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Allows access to email log documents.
     * @path /databases/{database}/documents/emailLogs/{emailLogId}
     * @allow (create) - No one can create email log documents (only the system can).
     * @allow (get, list) - No one can read email log documents.
     * @allow (update, delete) - No one can update or delete email log documents.
     * @principle Restricts access to email logs to system-level processes only, ensuring data integrity and preventing unauthorized access.
     */
    match /emailLogs/{emailLogId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows access to audit log documents.
     * @path /databases/{database}/documents/auditLogs/{auditLogId}
     * @allow (create) - No one can create audit log documents (only the system can).
     * @allow (get, list) - No one can read audit log documents.
     * @allow (update, delete) - No one can update or delete audit log documents.
     * @principle Restricts access to audit logs to system-level processes only, ensuring data integrity and preventing unauthorized access.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows access to live logs documents.
     * @path /databases/{database}/documents/live_logs
     * @allow (get, list) - Any user can read live logs documents.
     * @allow (create) - No one can create live logs documents.
     * @allow (update, delete) - No one can update or delete live logs documents.
     */
    match /live_logs {
      allow get, list: if true;
      allow create: if false;
      allow update, delete: if false;
    }
  }
}