/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information; accessible only to the user themselves.
 * - `/attendance_records/{attendanceRecordId}`: Stores employee attendance records; publicly readable, but only authorized users can modify records with matching IDs.
 * - `/grace_settings/{graceSettingId}`: Stores grace time settings; publicly readable, but only authorized users can modify settings.
 * - `/audit_logs/{auditLogId}`: Stores audit logs; publicly readable, but only authorized users can create logs.
 * - `/email_logs/{emailLogId}`: Stores email logs; publicly readable, but only authorized users can create logs.
 * - `/auto_audit_settings/auto_audit_config`: Stores auto-audit settings; publicly readable, but only authorized users can modify settings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - All collections are publicly readable to facilitate prototyping.
 * - Write access to all collections is restricted and needs to be specifically configured.
 *
 * Denormalization for Authorization:
 * - The rules rely on request.auth.uid for user identification. No denormalization is needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @deny (get) User with UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @deny (update) User with UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile of 'user_abc'.
     * @principle Enforces user ownership for profile management.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages employee attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get) Any user can read any attendance record.
     * @allow (list) Any user can list attendance records.
     * @deny (create) Any user cannot create an attendance record.
     * @deny (update) Any user cannot update an attendance record.
     * @deny (delete) Any user cannot delete an attendance record.
     * @principle Allows public read access but restricts write access.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages grace time settings for late entry detection.
     * @path /grace_settings/{graceSettingId}
     * @allow (get) Any user can read any grace setting.
     * @allow (list) Any user can list grace settings.
     * @deny (create) Any user cannot create a grace setting.
     * @deny (update) Any user cannot update a grace setting.
     * @deny (delete) Any user cannot delete a grace setting.
     * @principle Allows public read access but restricts write access.
     */
    match /grace_settings/{graceSettingId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages audit logs.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Any user can read any audit log.
     * @allow (list) Any user can list audit logs.
     * @deny (create) Any user cannot create an audit log.
     * @deny (update) Any user cannot update an audit log.
     * @deny (delete) Any user cannot delete an audit log.
     * @principle Allows public read access but restricts write access.
     */
    match /audit_logs/{auditLogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages email logs for tracking notifications.
     * @path /email_logs/{emailLogId}
     * @allow (get) Any user can read any email log.
     * @allow (list) Any user can list email logs.
     * @deny (create) Any user cannot create an email log.
     * @deny (update) Any user cannot update an email log.
     * @deny (delete) Any user cannot delete an email log.
     * @principle Allows public read access but restricts write access.
     */
    match /email_logs/{emailLogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the configuration for auto-auditing.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) Any user can read the auto-audit settings.
     * @allow (list) Any user can list the auto-audit settings.
     * @deny (create) Any user cannot create the auto-audit settings.
     * @deny (update) Any user cannot update the auto-audit settings.
     * @deny (delete) Any user cannot delete the auto-audit settings.
     * @principle Allows public read access but restricts write access.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }
  }
}