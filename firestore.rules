rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to manage client data.
     * @path /clients/{clientId}
     * @allow (create) User with auth can create a new client.
     * @deny (create) User without auth cannot create a client.
     * @allow (get, list) Any authenticated user can read client data.
     * @deny (update, delete) No one can update or delete client data.
     * @principle Enforces authenticated access for managing client data.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage branch data within a client.
     * @path /clients/{clientId}/branches/{branchId}
     * @allow (create) User with auth can create a new branch.
     * @deny (create) User without auth cannot create a branch.
     * @allow (get, list) Any authenticated user can read branch data.
     * @deny (update, delete) No one can update or delete branch data.
     * @principle Enforces authenticated access for managing branch data within a client.
     */
    match /clients/{clientId}/branches/{branchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage employee data within a branch.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) User with auth can create a new employee.
     * @deny (create) User without auth cannot create a employee.
     * @allow (get, list) Any authenticated user can read employee data.
     * @deny (update, delete) No one can update or delete employee data.
     * @principle Enforces authenticated access for managing employee data within a branch.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage biometric device data within a branch.
     * @path /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) User with auth can create a new biometric device.
     * @deny (create) User without auth cannot create a biometric device.
     * @allow (get, list) Any authenticated user can read biometric device data.
     * @deny (update, delete) No one can update or delete biometric device data.
     * @principle Enforces authenticated access for managing biometric device data within a branch.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage attendance records for an employee.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) User with auth can create a new attendance record.
     * @deny (create) User without auth cannot create a attendance record.
     * @allow (get, list) Any authenticated user can read attendance record data.
     * @deny (update, delete) No one can update or delete attendance record data.
     * @principle Enforces authenticated access for managing attendance records for an employee.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage leave requests for an employee.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) User with auth can create a new leave request.
     * @deny (create) User without auth cannot create a leave request.
     * @allow (get, list) Any authenticated user can read leave request data.
     * @deny (update, delete) No one can update or delete leave request data.
     * @principle Enforces authenticated access for managing leave requests for an employee.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User can create a notification for themselves if the userId matches their auth ID.
     * @deny (create) User cannot create a notification for another user.
     * @allow (get, list) User can read their own notifications if the userId matches their auth ID.
     * @deny (get, list) User cannot read another user's notifications.
     * @allow (update, delete) User can update and delete their own notifications if the userId matches their auth ID.
     * @deny (update, delete) User cannot update or delete another user's notifications.
     * @principle Enforces document ownership for user-specific notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read and write email logs.  **CRITICAL: This should be restricted in production.**
     * @path /emailLogs/{emailLogId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write email logs.
     * @principle Open access for logging (should be restricted in production).
     */
    match /emailLogs/{emailLogId} {
       allow get, list, create, update, delete: if false; // Disable all access in prototype
    }

    /**
     * @description Allows anyone to read and write audit logs.  **CRITICAL: This should be restricted in production.**
     * @path /auditLogs/{auditLogId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write audit logs.
     * @principle Open access for logging (should be restricted in production).
     */
    match /auditLogs/{auditLogId} {
      allow get, list, create, update, delete: if false; // Disable all access in prototype
    }
  }
}