/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and general public read access to other collections, with owner-only writes.
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles. Only the user themselves can read/write their profile.
 *  - /attendance_records/{attendanceRecordId}: Stores attendance records. Public read, owner-only write based on a denormalized ownership field.
 *  - /grace_settings/{graceSettingId}: Stores grace time settings. Public read, owner-only write based on a denormalized ownership field.
 *  - /audit_logs/{auditLogId}: Stores audit logs. Public read, owner-only write based on a denormalized ownership field.
 *  - /email_logs/{emailLogId}: Stores email logs. Public read, owner-only write based on a denormalized ownership field.
 *  - /auto_audit_settings/auto_audit_config: Stores auto-audit settings. Public read, owner-only write based on a denormalized ownership field.
 * @keySecurityDecisions
 *  - Users can only manage their own profiles.
 *  - All other collections are readable by anyone, but only writable by an owner (an `ownerId` field is assumed to exist).
 *  - The rules do not enforce the entire schema. They only enforce authorization and relational integrity where absolutely necessary.
 *  - List operations are enabled for user-owned data and public read collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
      return isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Manages user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User NI2s3RRNvCQAU8sgA0vVpKDQNG22 can create their profile at /users/NI2s3RRNvCQAU8sgA0vVpKDQNG22.
     * @deny (create) - User ABC cannot create a profile at /users/XYZ.
     * @allow (get, update, delete) - User NI2s3RRNvCQAU8sgA0vVpKDQNG22 can read/write their profile at /users/NI2s3RRNvCQAU8sgA0vVpKDQNG22.
     * @deny (get, update, delete) - User ABC cannot read/write the profile at /users/XYZ.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Stores individual employee attendance records. Public read, owner-only write based on a denormalized ownership field.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Any user can read any attendance record.
     * @deny (create, update, delete) - Only the owner can create/update/delete an attendance record.  An 'ownerId' field is required in the data.
     * @principle Public read access with owner-only writes.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Stores grace time settings. Public read, owner-only write based on a denormalized ownership field.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) - Any user can read any grace setting.
     * @deny (create, update, delete) - Only the owner can create/update/delete a grace setting. An 'ownerId' field is required in the data.
     * @principle Public read access with owner-only writes.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Stores audit logs. Public read, owner-only write based on a denormalized ownership field.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) - Any user can read any audit log.
     * @deny (create, update, delete) - Only the owner can create/update/delete an audit log. An 'ownerId' field is required in the data.
     * @principle Public read access with owner-only writes.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Stores email logs. Public read, owner-only write based on a denormalized ownership field.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) - Any user can read any email log.
     * @deny (create, update, delete) - Only the owner can create/update/delete an email log. An 'ownerId' field is required in the data.
     * @principle Public read access with owner-only writes.
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Stores the configuration for auto-auditing. There is only one document with the fixed ID 'auto_audit_config'. Public read, owner-only write based on a denormalized ownership field.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) - Any user can read the auto-audit settings.
     * @deny (create, update, delete) - Only the owner can create/update/delete the auto-audit settings. An 'ownerId' field is required in the data.
     * @principle Public read access with owner-only writes.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    match /roles/{roleId} {
        allow get, list: if false;
        allow create, update, delete: if false;
    }
  }
}