/**
 * @fileoverview Firestore Security Rules for Staffwise application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open read access for some collections with strict ownership and role-based access control for others.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user and potentially admins.
 * - /attendance_records/{attendanceRecordId}: Attendance records, with potentially open read access and restricted write access.
 * - /grace_settings/{graceSettingId}: Grace period settings, with potentially open read access and restricted write access.
 * - /audit_logs/{auditLogId}: Audit logs, with potentially open read access and restricted write access.
 * - /email_logs/{emailLogId}: Email logs, with restricted access.
 * - /auto_audit_settings/auto_audit_config: Auto-audit configuration, with restricted access.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed to prevent unauthorized data scraping.
 * - The ruleset prioritizes ease of use by avoiding complex data validation in favor of simpler authorization checks.
 * - Collections like `attendance_records`, `grace_settings`, and `audit_logs` are configured to allow public reads for prototyping purposes.  This should be reviewed and restricted in a production environment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User profile data. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User NI2s3RRNvCQAU8sgA0vVpKDQNG22 can create their own profile document.
     * @deny (create) User ABC cannot create a profile for user DEF.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly prevent listing users

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Attendance records. Currently allows public read access.  Write access is denied.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get) Any user can read any attendance record.
     * @deny (create) No user can create an attendance record through direct client write.
     * @principle Allows public read access for prototyping.  Restrict writes.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grace period settings. Currently allows public read access.  Write access is denied.
     * @path /grace_settings/{graceSettingId}
     * @allow (get) Any user can read any grace setting.
     * @deny (create) No user can create a grace setting through direct client write.
     * @principle Allows public read access for prototyping.  Restrict writes.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Audit logs. Currently allows public read access. Write access is denied.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Any user can read any audit log.
     * @deny (create) No user can create an audit log through direct client write.
     * @principle Allows public read access for prototyping. Restrict writes.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Email logs. Restricts all access.
     * @path /email_logs/{emailLogId}
     * @deny (get) No user can read email logs.
     * @deny (create) No user can create an email log.
     * @principle Restricts access to email logs.
     */
    match /email_logs/{emailLogId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Auto-audit configuration. Restricts all access.
     * @path /auto_audit_settings/auto_audit_config
     * @deny (get) No user can read the auto-audit configuration.
     * @deny (create) No user can create the auto-audit configuration.
     * @principle Restricts access to auto-audit settings.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get, list, create, update, delete: if false;
    }
    
    match /roles {
        allow get, list: if false;
      allow create, update, delete: if false;
    }
  }
}