/**
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              and allows public read access to attendance records, grace settings, audit logs and email logs,
 *              but restricts writes to these collections to authenticated users.  There is also configuration settings for auto audits.
 *              It is designed for rapid prototyping and does not include detailed schema validation.
 * @dataStructure
 *   /users/{userId} - Stores user profile data, accessible only to the user themselves.
 *   /attendance_records/{attendanceRecordId} - Stores employee attendance records, publicly readable.
 *   /grace_settings/{graceSettingId} - Stores grace time settings, publicly readable.
 *   /audit_logs/{auditLogId} - Stores audit logs, publicly readable.
 *   /email_logs/{emailLogId} - Stores email logs, publicly readable.
 *   /auto_audit_settings/auto_audit_config - Stores settings for auto-auditing.
 * @keySecurityDecisions
 *   - User listing is explicitly denied.
 *   - Public read access is granted to attendance records, grace settings, audit logs and email logs for prototyping.
 *   - Writes to attendance records, grace settings, audit logs and email logs are allowed for authenticated users only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, accessible only to the user themselves.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the document does not exist.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages employee attendance records. Publicly readable, writes allowed for authenticated users.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Anyone can read attendance records.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete attendance records.
     * @deny (create, update, delete) - If not authenticated.
     * @principle Provides public read access with authentication required for writes.
     */
    match /attendance_records/{attendanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages grace time settings. Publicly readable, writes allowed for authenticated users.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) - Anyone can read grace time settings.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete grace time settings.
     * @deny (create, update, delete) - If not authenticated.
     * @principle Provides public read access with authentication required for writes.
     */
    match /grace_settings/{graceSettingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages audit logs. Publicly readable, writes allowed for authenticated users.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) - Anyone can read audit logs.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete audit logs.
     * @deny (create, update, delete) - If not authenticated.
     * @principle Provides public read access with authentication required for writes.
     */
    match /audit_logs/{auditLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages email logs. Publicly readable, writes allowed for authenticated users.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) - Anyone can read email logs.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete email logs.
     * @deny (create, update, delete) - If not authenticated.
     * @principle Provides public read access with authentication required for writes.
     */
    match /email_logs/{emailLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages auto-audit settings.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) - Anyone can read the auto-audit settings.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete the auto-audit settings.
     * @deny (create, update, delete) - If not authenticated.
     * @principle Provides public read access with authentication required for writes.
     */
    match /auto_audit_settings/auto_audit_config {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}