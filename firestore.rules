/**
 * @fileoverview Firestore Security Rules for the Staffwise Attendance System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict, path-based ownership model for data access. Multi-tenancy is achieved through the `clients` collection, with each client owning its branches, employees, and associated data.
 *
 * Data Structure:
 * The Firestore database is structured hierarchically: clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}. This structure reflects the organizational relationships within the system.
 *
 * Key Security Decisions:
 * - Path-based ownership is enforced. Each entity's access control is determined by its location in the Firestore path.
 * - Data denormalization is used to avoid costly `get()` calls and ensure authorization independence. Client and branch IDs are included in subcollections to simplify security rules.
 * - The rules are designed to prevent unauthorized listing of collections containing user-specific private data.
 * - Write operations are strictly controlled to ensure data integrity and prevent unauthorized modifications.
 * - No user roles are defined. If roles are ever created, they should be denormalized onto the documents that require role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against unauthenticated requests
     * @path N/A
     * @allow N/A
     * @deny all unauthenticated requests
     * @principle Protects the entire database by rejecting requests from unauthenticated users.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user is signed in and the user ID matches, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and that the document exists.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user is signed in, the user ID matches, and the document exists, false otherwise.
     * @example isExistingOwner('someUserId')
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow get, list: if true;
     * @allow create: if request.auth.uid != null;
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId} collection.
     * @path /clients/{clientId}/branches/{branchId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees/{employeeId} collection.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} collection.
     * @path /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/attendanceRecords collection.
     * @path /clients/{clientId}/branches/{branchId}/attendanceRecords
     * @allow list: if false; // Client's can't list all attendance records, need to be filtered by employee
     * @allow get: if false; // Not enabled, needs to be filtered by employee
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Requires employeeId to be provided, so can only be accessed via employee subcollection.
     */
    match /clients/{clientId}/branches/{branchId}/attendanceRecords/{attendanceRecordId} {
       allow get, list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} collection.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} collection.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public Read with Owner-Only Writes
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users/{userId}/notifications/{notificationId} collection.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /emailLogs/{emailLogId} collection.
     * @path /emailLogs/{emailLogId}
     * @allow get, list: if false;
     * @allow create: if isSignedIn(); // TODO: should be only be by server/admin
     * @allow update, delete: if false; // TODO: should be only be by server/admin
     * @deny get: if true;
     * @deny list: if true;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Requires admin privileges for write operations.
     */
    match /emailLogs/{emailLogId} {
      allow get, list: if false;
      allow create: if isSignedIn(); // TODO: should be only be by server/admin
      allow update, delete: if false; // TODO: should be only be by server/admin
    }

    /**
     * @description Rules for the /auditLogs/{auditLogId} collection.
     * @path /auditLogs/{auditLogId}
     * @allow get, list: if false;
     * @allow create: if isSignedIn(); // TODO: should be only be by server/admin
     * @allow update, delete: if false; // TODO: should be only be by server/admin
     * @deny get: if true;
     * @deny list: if true;
     * @deny create: if false;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Requires admin privileges for write operations.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if false;
      allow create: if isSignedIn(); // TODO: should be only be by server/admin
      allow update, delete: if false; // TODO: should be only be by server/admin
    }
  }
}