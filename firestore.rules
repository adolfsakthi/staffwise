/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a tiered security model.
 *
 * Data Structure:
 * - Users are stored under `/users/{userId}`.
 * - Attendance records, grace settings, audit logs, email logs, auto audit settings, and devices are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Listing of users is disallowed for security reasons.
 * - Grace settings, audit logs, email logs, auto audit settings, and devices have public read access, but restricted write access (TODO: Implement admin role for writes).
 *
 * Denormalization for Authorization:
 * - Not explicitly used in this version, but can be added for more fine-grained access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @deny (create) User attempting to create a profile with a different UID.
     * @allow (get, update, delete) Owner can read, update, and delete their own profile.
     * @deny (get, update, delete) Non-owner attempting to read, update, or delete another user's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) Anyone can read attendance records.
     * @deny (create, update, delete) Only admins can create, update, or delete attendance records (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) Anyone can read grace settings.
     * @deny (create, update, delete) Only admins can create, update, or delete grace settings (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) Anyone can read audit logs.
     * @deny (create, update, delete) Only admins can create, update, or delete audit logs (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) Anyone can read email logs.
     * @deny (create, update, delete) Only admins can create, update, or delete email logs (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get, list) Anyone can read the auto audit settings.
     * @deny (create, update, delete) Only admins can create, update, or delete the auto audit settings (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /auto_audit_settings/auto_audit_config {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access, but restricts write access.
     * @path /devices/{deviceId}
     * @allow (get, list) Anyone can read device information.
     * @deny (create, update, delete) Only admins can create, update, or delete devices (TODO: Implement admin role).
     * @principle Public read, owner-only write (requires ownerId field).
     */
    match /devices/{deviceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}