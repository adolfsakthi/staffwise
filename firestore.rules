/**
 * @fileoverview Firestore Security Rules for the Staffwise Attendance Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict hierarchical ownership model based on the path:
 * /clients/{clientId}/branches/{branchId}/employees/{employeeId}/...
 * Each level of the hierarchy "owns" the data beneath it.  This means, for example,
 * that only a valid client can create or modify branches, and only a valid branch
 * can create or modify employees.  User-specific data, like notifications, is stored
 * under /users/{userId} and is only accessible to the authenticated user.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /clients/{clientId}: Root collection for clients.
 * - /clients/{clientId}/branches/{branchId}: Branches belonging to a client.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}: Employees belonging to a branch.
 * - /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}: Biometric devices belonging to a branch
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}: Attendance records for an employee.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}: Leave requests for an employee.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user.
 * - /emailLogs/{emailLogId}: Logs of all sent emails.
 * - /auditLogs/{auditLogId}: Logs of all audit activities.
 *
 * Key Security Decisions:
 * - Path-Based Ownership: The rules strongly rely on the path structure to enforce ownership. Each document implicitly belongs to its parent.
 * - Denormalization: Client and branch IDs are denormalized into subcollections to avoid costly `get()` calls in the rules.
 * - No User Listing: Listing all users is explicitly denied.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Grants access control for Client documents. Clients cannot be created from the client.
     * @path: /clients/{clientId}
     * @allow: None, as clients can only be created via back-end.
     * @deny: (create) - any user attempts to create a client document.
     * @principle: Server-side management of clients.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for Branch documents.
     * @path: /clients/{clientId}/branches/{branchId}
     * @allow: Authenticated user can list all branches within a client
     * @deny: Unauthenticated user attempts to create a branch document.
     * @principle: Path-based ownership, must be created from back-end.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for Employee documents.
     * @path: /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow: Authenticated user can list all employees within a branch
     * @deny: Unauthenticated user attempts to create a employee document.
     * @principle: Path-based ownership, must be created from back-end.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for BiometricDevice documents.
     * @path: /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow: Authenticated user can list all biometric devices within a branch
     * @deny: Unauthenticated user attempts to create a biometric device document.
     * @principle: Path-based ownership, must be created from back-end.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for AttendanceRecord documents.
     * @path: /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow: Authenticated user can list all attendance records for an employee
     * @deny: Unauthenticated user attempts to create a attendance record document.
     * @principle: Path-based ownership, must be created from back-end.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for LeaveRequest documents.
     * @path: /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow: Authenticated user can list all leave requests for an employee
     * @deny: Unauthenticated user attempts to create a leave request document.
     * @principle: Path-based ownership, must be created from back-end.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for Notification documents for a specific user.
     * @path: /users/{userId}/notifications/{notificationId}
     * @allow: Authenticated user can read their own notifications
     * @deny: Authenticated user attempts to read another user's notifications.
     * @principle: User-based ownership.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Grants access control for EmailLog documents.
     * @path: /emailLogs/{emailLogId}
     * @allow: None, as email logs should only be created and accessed via back-end.
     * @deny: Any operation by a client user.
     * @principle: Server-side logging.
     */
    match /emailLogs/{emailLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Grants access control for AuditLog documents.
     * @path: /auditLogs/{auditLogId}
     * @allow: None, as audit logs should only be created and accessed via back-end.
     * @deny: Any operation by a client user.
     * @principle: Server-side logging.
     */
    match /auditLogs/{auditLogId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description: Checks if the user is signed in.
     * @return: True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Checks if the authenticated user is the owner of the resource, based on the provided userId.
     * @param: userId - The user ID to compare against the authenticated user's UID.
     * @return: True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description: Checks if the authenticated user is the owner of the existing resource, based on the provided userId and that the document exists.
     * @param: userId - The user ID to compare against the authenticated user's UID.
     * @return: True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}