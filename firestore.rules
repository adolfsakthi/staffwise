/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and generally restricts access to other collections.
 *
 * Data Structure:
 * - Users: Stored under `/users/{userId}`. Each user can only read/write their own profile.
 * - Attendance Records: Stored under `/attendance_records/{attendanceRecordId}`. No specific access control defined.
 * - Grace Settings: Stored under `/grace_settings/{graceSettingId}`. No specific access control defined.
 * - Audit Logs: Stored under `/audit_logs/{auditLogId}`. No specific access control defined.
 * - Email Logs: Stored under `/email_logs/{emailLogId}`. No specific access control defined.
 * - Auto Audit Settings: Stored under `/auto_audit_settings/auto_audit_config`. No specific access control defined.
 * - Devices: Stored under `/devices/{deviceId}`. No specific access control defined.
 *
 * Key Security Decisions:
 * - Users can only manage their own user profiles.
 * - Listing of users is disallowed.
 * - All other collections have open read, write access. This is for rapid prototyping only and MUST be restricted later.
 *
 * Denormalization for Authorization:
 *   - User documents in `/users/{userId}` must have the `uid` field match the `userId` path parameter.
 *   - This allows the `isOwner()` function to quickly authorize access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.get('uid') == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.get('uid') == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores individual employee attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get) Any signed-in user can read any attendance record.
     * @allow (list) Any signed-in user can list attendance records.
     * @allow (create) Any signed-in user can create an attendance record.
     * @allow (update) Any signed-in user can update any attendance record.
     * @allow (delete) Any signed-in user can delete any attendance record.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores grace time settings for late entry detection.
     * @path /grace_settings/{graceSettingId}
     * @allow (get) Any signed-in user can read any grace setting.
     * @allow (list) Any signed-in user can list grace settings.
     * @allow (create) Any signed-in user can create a grace setting.
     * @allow (update) Any signed-in user can update any grace setting.
     * @allow (delete) Any signed-in user can delete any grace setting.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /grace_settings/{graceSettingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores audit logs with details about each audit execution.
     * @path /audit_logs/{auditLogId}
     * @allow (get) Any signed-in user can read any audit log.
     * @allow (list) Any signed-in user can list audit logs.
     * @allow (create) Any signed-in user can create an audit log.
     * @allow (update) Any signed-in user can update any audit log.
     * @allow (delete) Any signed-in user can delete any audit log.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /audit_logs/{auditLogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores email logs for tracking notifications.
     * @path /email_logs/{emailLogId}
     * @allow (get) Any signed-in user can read any email log.
     * @allow (list) Any signed-in user can list email logs.
     * @allow (create) Any signed-in user can create an email log.
     * @allow (update) Any signed-in user can update any email log.
     * @allow (delete) Any signed-in user can delete any email log.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /email_logs/{emailLogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores the configuration for auto-auditing.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) Any signed-in user can read the auto audit config.
     * @allow (list) Any signed-in user can list the auto audit config.
     * @allow (create) Any signed-in user can create the auto audit config.
     * @allow (update) Any signed-in user can update the auto audit config.
     * @allow (delete) Any signed-in user can delete the auto audit config.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores biometric device information.
     * @path /devices/{deviceId}
     * @allow (get) Any signed-in user can read any device.
     * @allow (list) Any signed-in user can list devices.
     * @allow (create) Any signed-in user can create a device.
     * @allow (update) Any signed-in user can update any device.
     * @allow (delete) Any signed-in user can delete any device.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /devices/{deviceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores roles.
     * @path /roles
     * @allow (get) Any signed-in user can read any role.
     * @allow (list) Any signed-in user can list roles.
     * @allow (create) Any signed-in user can create a role.
     * @allow (update) Any signed-in user can update any role.
     * @allow (delete) Any signed-in user can delete any role.
     * @principle Open access for prototyping.  MUST BE RESTRICTED LATER.
     */
    match /roles {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add authorization checks
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}