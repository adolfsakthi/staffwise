/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and provides controlled access to attendance records, grace settings, audit logs, email logs, and auto-audit settings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /attendance_records/{attendanceRecordId}: Stores employee attendance records.  Write access is disallowed, read access is public.
 * - /grace_settings/{graceSettingId}: Stores grace time settings. Write access is disallowed, read access is public.
 * - /audit_logs/{auditLogId}: Stores audit logs.  Write access is disallowed, read access is public.
 * - /email_logs/{emailLogId}: Stores email logs.  Write access is disallowed, read access is public.
 * - /auto_audit_settings/auto_audit_config: Stores auto-audit settings. Write access is disallowed, read access is public.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections: attendance_records, grace_settings, audit_logs, email_logs and auto_audit_settings are publicly readable but not writable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the requested user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's user ID AND the resource exists.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)));
    }

    /**
     * @description Enforces that on create operations, the userId matches the document id.
     */
    function isValidUserCreate() {
      return request.resource.data.uid == request.auth.uid;
    }

    /**
     * @description Enforces that on update operations, the userId cannot be changed.
     */
    function isValidUserUpdate() {
      return request.resource.data.uid == resource.data.uid;
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidUserCreate();
      allow update: if isOwner(userId) && isExistingOwner(userId) && isValidUserUpdate();
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Rules for attendance records.
     * @path /attendance_records/{attendanceRecordId}
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for grace settings.
     * @path /grace_settings/{graceSettingId}
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for audit logs.
     * @path /audit_logs/{auditLogId}
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for email logs.
     * @path /email_logs/{emailLogId}
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for auto-audit settings.
     * @path /auto_audit_settings/auto_audit_config
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Rules for devices collection (fix for reported issue).
     * @path /devices
     */
    match /devices/{deviceId} {
      allow list: if true;
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}