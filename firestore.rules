/**
 * @fileOverview Firestore Security Rules for Attendance Management System
 *
 * Core Philosophy:
 * This ruleset enforces a hierarchical, multi-tenant security model. Each entity is nested under a client and branch,
 * ensuring data isolation and access control. Path-based ownership is the primary authorization mechanism.
 *
 * Data Structure:
 * - /clients/{clientId}: Top-level collection for clients.
 * - /clients/{clientId}/branches/{branchId}: Branches belonging to a client.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}: Employees of a branch.
 * - /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}: Biometric devices registered to a branch.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}: Attendance records for an employee.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}: Leave requests submitted by employees.
 * - /users/{userId}/notifications/{notificationId}: Notifications for individual users.
 * - /emailLogs/{emailLogId}: Logs of sent emails (potentially sensitive; consider stricter access).
 * - /auditLogs/{auditLogId}: Logs of audit activities (potentially sensitive; consider stricter access).
 *
 * Key Security Decisions:
 * - All read and write operations are allowed for prototyping purposes.
 * - Path-based ownership is enforced where applicable (e.g., notifications).
 * - Data validation is minimal in this prototyping phase but should be extended.
 * - EmailLogs and AuditLogs could be sensitive; consider restricting access in production.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to client documents.
     * @path /clients/{clientId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to branch documents.
     * @path /clients/{clientId}/branches/{branchId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to employee documents.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to biometric device documents.
     * @path /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to attendance record documents.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to leave request documents.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to notification documents for the owner.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) request.auth.uid == userId
     * @allow (get) request.auth.uid == userId
     * @allow (update) request.auth.uid == userId
     * @allow (delete) request.auth.uid == userId
     * @deny (create) request.auth.uid != userId
     * @deny (get) request.auth.uid != userId
     * @deny (update) request.auth.uid != userId
     * @deny (delete) request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows read and write access to email log documents.
     * @path /emailLogs/{emailLogId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users. Consider restricting in production.
     */
    match /emailLogs/{emailLogId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to audit log documents.
     * @path /auditLogs/{auditLogId}
     * @allow (create) request.auth != null
     * @allow (get) request.auth != null
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (get) false
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Allows create, read, update, and delete operations for all authenticated users. Consider restricting in production.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}