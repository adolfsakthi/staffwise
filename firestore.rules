rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can get, update, and delete their own profile.
     * @deny (create) Authenticated user cannot create a profile with a userId that does not match their auth.uid.
     * @deny (get, update, delete) Authenticated user cannot get, update, and delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //  Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) Any user can read attendance records.
     * @deny (create, update, delete) No one can create, update, or delete attendance records.
     * @principle Public read access with restricted writes.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to grace period settings.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list) Any user can read grace period settings.
     * @deny (create, update, delete) No one can create, update, or delete grace period settings.
     * @principle Public read access with restricted writes.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to audit logs.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list) Any user can read audit logs.
     * @deny (create, update, delete) No one can create, update, or delete audit logs.
     * @principle Public read access with restricted writes.
     */
    match /audit_logs/{auditLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to email logs.
     * @path /email_logs/{emailLogId}
     * @allow (get, list) Any user can read email logs.
     * @deny (create, update, delete) No one can create, update, or delete email logs.
     * @principle Public read access with restricted writes.
     */
    match /email_logs/{emailLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to auto audit settings.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get) Any user can read the auto audit settings.
     * @deny (create, update, delete) No one can create, update, or delete the auto audit settings.
     * @principle Public read access with restricted writes.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to biometric devices.
     * @path /devices/{deviceId}
     * @allow (get, list) Any user can read device information.
     * @deny (create, update, delete) No one can create, update, or delete device information.
     * @principle Public read access with restricted writes.
     */
    match /devices/{deviceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}