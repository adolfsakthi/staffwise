/**
 * @file Firebase Security Rules for the Staffwise Attendance Management System.
 *
 * @Core Philosophy:
 * This ruleset enforces a strict, path-based ownership model for data access within a multi-tenant application.
 * Data is organized hierarchically, with `clients` at the top level, followed by `branches`, `employees`, and their related data.
 * Authorization is streamlined through client and branch ID denormalization in subcollections.
 *
 * @Data Structure:
 * - /clients/{clientId}: Root collection for clients.
 * - /clients/{clientId}/branches/{branchId}: Branches belonging to a client.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}: Employees belonging to a branch.
 * - /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}: Biometric devices belonging to a branch.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}: Attendance records for an employee.
 * - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}: Leave requests for an employee.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a specific user.
 * - /emailLogs/{emailLogId}: Logs of all sent emails.
 * - /auditLogs/{auditLogId}: Logs of all audit activities.
 *
 * @Key Security Decisions:
 * - Path-based ownership is the primary mechanism for authorization.
 * - Client and branch IDs are denormalized to avoid costly `get()` calls in security rules.
 * - List operations are generally allowed within user-scoped subcollections, enabling clients to retrieve their own data.
 * - Audit and email logs are secured to prevent unauthorized access.
 * - The rules prioritize authorization and relational integrity checks, omitting detailed schema validation for rapid prototyping.
 *
 * @Denormalization for Authorization:
 * - Client and branch IDs are denormalized into subcollections (e.g., `employees`, `attendanceRecords`) to enable authorization without extra reads.
 *
 * @Structural Segregation:
 * - Dedicated collections are used for different data types (e.g., `attendanceRecords`, `leaveRequests`) to maintain a consistent security posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to client data. Only authenticated users can create clients.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (create) Signed-in user can create a client document.
     * @deny (create) User without authentication tries to create a client.
     * @allow (get, list) Any authenticated user can read client information.
     * @deny (update, delete) No one can update or delete a client via client ID.
     * @principle Requires a valid authentication to create clients.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to branch data for a specific client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}
     * @allow (create) Authenticated user can create a branch within a client.
     * @deny (create) User without authentication tries to create a branch.
     * @allow (get, list) Any authenticated user can read branch information for a client.
     * @deny (update, delete) No one can update or delete a branch via branch ID.
     * @principle Requires valid authentication to create branches within a client.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to employee data for a specific branch within a client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) Authenticated user can create an employee within a branch.
     * @deny (create) User without authentication tries to create an employee.
     * @allow (get, list) Any authenticated user can read employee information.
     * @deny (update, delete) No one can update or delete an employee via employee ID.
     * @principle Requires valid authentication to create employees within a branch.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to biometric device data for a specific branch within a client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) Authenticated user can create a biometric device within a branch.
     * @deny (create) User without authentication tries to create a biometric device.
     * @allow (get, list) Any authenticated user can read biometric device information.
     * @deny (update, delete) No one can update or delete a biometric device via device ID.
     * @principle Requires valid authentication to create biometric devices within a branch.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to attendance record data for a specific employee within a branch and client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) Authenticated user can create an attendance record.
     * @deny (create) User without authentication tries to create an attendance record.
     * @allow (get, list) Any authenticated user can read attendance record information.
     * @deny (update, delete) No one can update or delete an attendance record via record ID.
     * @principle Requires valid authentication to create attendance records.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to leave request data for a specific employee within a branch and client.
     * @path /databases/{database}/documents/clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) Authenticated user can create a leave request.
     * @deny (create) User without authentication tries to create a leave request.
     * @allow (get, list) Any authenticated user can read leave request information.
     * @deny (update, delete) No one can update or delete a leave request via request ID.
     * @principle Requires valid authentication to create leave requests.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to notification data for a specific user.
     * @path /databases/{database}/documents/users/{userId}/notifications/{notificationId}
     * @allow (create) Authenticated user can create a notification for themselves.
     * @deny (create) User without authentication tries to create a notification.
     * @allow (get, list) Owner can read their notifications.
     * @deny (update, delete) No one can update or delete a notification except the owner.
     * @principle Enforces ownership for notification data.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }

    /**
     * @description Manages access to email log data.
     * @path /databases/{database}/documents/emailLogs/{emailLogId}
     * @allow get, list: if false;
     * @deny create, update, delete: if true;
     * @principle Restricts access to email logs.
     */
    match /emailLogs/{emailLogId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to audit log data.
     * @path /databases/{database}/documents/auditLogs/{auditLogId}
     * @allow get, list: if false;
     * @deny create, update, delete: if true;
     * @principle Restricts access to audit logs.
     */
    match /auditLogs/{auditLogId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Denies access to the /devices collection, as requested in the error report.
     * @path /databases/{database}/documents/devices
     * @deny get, list, create, update, delete: if true;
     * @principle Explicitly denies all operations on the /devices collection.
     */
    match /devices/{deviceId} {
        allow get, list, create, update, delete: if false;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}