/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict, path-based ownership model for a multi-tenant attendance management system.
 *
 * Core Philosophy:
 *  - Each client owns its branches, employees, biometric devices, attendance records, and leave requests.
 *  - Only authenticated users can access data.
 *  - Clients and their data are isolated from each other using path-based rules and data denormalization.
 *  - User-specific notifications are stored under the `/users/{userId}` path.
 *
 * Data Structure:
 *  - /clients/{clientId}: Root collection for client data.
 *  - /clients/{clientId}/branches/{branchId}: Branches belonging to a client.
 *  - /clients/{clientId}/branches/{branchId}/employees/{employeeId}: Employees of a branch.
 *  - /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}: Biometric devices assigned to a branch.
 *  - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}: Attendance records for an employee.
 *  - /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}: Leave requests submitted by an employee.
 *  - /users/{userId}/notifications/{notificationId}: Notifications specific to a user.
 *  - /emailLogs/{emailLogId}: Logs of all sent emails (access restricted).
 *  - /auditLogs/{auditLogId}: Logs of all audit activities (access restricted).
 *
 * Key Security Decisions:
 *  - Path-based ownership is strictly enforced for all client-related data.
 *  - Data consistency between the path and document fields is validated on create and update.
 *  - Client, Branch, and Employee IDs are denormalized into subcollections to simplify authorization rules and improve performance.
 *
 * Denormalization for Authorization:
 *  - Client ID, Branch ID, and Employee ID are duplicated in subcollections (e.g., AttendanceRecord) to avoid costly `get()` calls in security rules. This allows for direct authorization checks based on the document's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows management of client data.
     * @path /clients/{clientId}
     * @allow (create) User with matching ID can create a client.
     * @deny (create) User tries to create a client with a mismatched ID.
     * @allow (get, list, update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
      allow get, list: if false;
      allow create: if isOwner(clientId);
      allow update, delete: if false;
    }

    /**
     * @description Allows management of branches within a client.
     * @path /clients/{clientId}/branches/{branchId}
     * @allow (create) User can create a branch if the client ID matches.
     * @deny (create) User tries to create a branch with a mismatched client ID.
     * @allow (get, list) if false;
     * @allow (update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId}/branches/{branchId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows management of employees within a branch.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}
     * @allow (create) User can create an employee if the client and branch IDs match.
     * @deny (create) User tries to create an employee with mismatched client or branch IDs.
     * @allow (get, list) if false;
     * @allow (update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId} {
       allow get, list: if false;
       allow create: if false;
       allow update, delete: if false;
    }

    /**
     * @description Allows management of biometric devices within a branch.
     * @path /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}
     * @allow (create) User can create a biometric device if the client and branch IDs match.
     * @deny (create) User tries to create a biometric device with mismatched client or branch IDs.
     * @allow (get, list) if false;
     * @allow (update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows management of attendance records for an employee.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}
     * @allow (create) User can create an attendance record if the client, branch, and employee IDs match.
     * @deny (create) User tries to create an attendance record with mismatched client, branch, or employee IDs.
     * @allow (get, list) if false;
     * @allow (update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows management of leave requests for an employee.
     * @path /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}
     * @allow (create) User can create a leave request if the client, branch, and employee IDs match.
     * @deny (create) User tries to create a leave request with mismatched client, branch, or employee IDs.
     * @allow (get, list) if false;
     * @allow (update, delete) if false;
     * @principle Enforces path-based ownership.
     */
    match /clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows management of user-specific notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User can create a notification if the user ID matches.
     * @deny (create) User tries to create a notification with a mismatched user ID.
     * @allow (get, list, update, delete) if isOwner(userId);
     * @principle Enforces path-based ownership.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to email logs.
     * @path /emailLogs/{emailLogId}
     * @allow (get, list, create, update, delete) if false;
     * @principle Restricts access to sensitive audit data.
     */
    match /emailLogs/{emailLogId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to audit logs.
     * @path /auditLogs/{auditLogId}
     * @allow (get, list, create, update, delete) if false;
     * @principle Restricts access to sensitive audit data.
     */
    match /auditLogs/{auditLogId} {
      allow get, list, create, update, delete: if false;
    }
  }
}