/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles.
 * - `/attendance_records/{attendanceRecordId}`: Stores attendance records.
 * - `/grace_settings/{graceSettingId}`: Stores grace time settings (global or per-department).
 * - `/audit_logs/{auditLogId}`: Stores audit logs.
 * - `/email_logs/{emailLogId}`: Stores email logs.
 * - `/auto_audit_settings/auto_audit_config`: Stores the auto-audit configuration.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under `/users/{userId}`.
 * - All other collections are NOT secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with userId 'user123'.
     * @allow (get, list, update, delete) User with UID 'user123' can read and modify their own profile.
     * @deny (get, list, update, delete) User with UID 'user456' cannot read or modify the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance records. NOT secured, since the requirement doc does not specify who can access this.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write attendance records.
     * @principle No security restrictions applied to attendance records.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to grace time settings. NOT secured, since the requirement doc does not specify who can access this.
     * @path /grace_settings/{graceSettingId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write grace time settings.
     * @principle No security restrictions applied to grace time settings.
     */
    match /grace_settings/{graceSettingId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to audit logs. NOT secured, since the requirement doc does not specify who can access this.
     * @path /audit_logs/{auditLogId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write audit logs.
     * @principle No security restrictions applied to audit logs.
     */
    match /audit_logs/{auditLogId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to email logs. NOT secured, since the requirement doc does not specify who can access this.
     * @path /email_logs/{emailLogId}
     * @allow (get, list, create, update, delete) Any authenticated user can read and write email logs.
     * @principle No security restrictions applied to email logs.
     */
    match /email_logs/{emailLogId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to auto-audit settings. NOT secured, since the requirement doc does not specify who can access this.
     * @path /auto_audit_settings/auto_audit_config
     * @allow (get, list, create, update, delete) Any authenticated user can read and write auto-audit settings.
     * @principle No security restrictions applied to auto-audit settings.
     */
    match /auto_audit_settings/auto_audit_config {
      allow get, list, create, update, delete: if isSignedIn();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is authenticated.
     * @return True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of the resource, and the resource exists.
      * @param {string} userId - The user ID to compare against the authenticated user's ID.
      * @return True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}