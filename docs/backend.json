{
  "entities": {
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client using the attendance management system. This facilitates multi-tenancy.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client. (PK)"
        },
        "name": {
          "type": "string",
          "description": "Name of the client organization."
        },
        "contactEmail": {
          "type": "string",
          "description": "Contact email for the client.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the client was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "contactEmail",
        "createdAt"
      ]
    },
    "Branch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Branch",
      "type": "object",
      "description": "Represents a branch or location of a client. Each branch can have its own biometric device.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the branch. (PK)"
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Branch)"
        },
        "name": {
          "type": "string",
          "description": "Name of the branch."
        },
        "location": {
          "type": "string",
          "description": "Physical location of the branch."
        },
        "biometricDeviceId": {
          "type": "string",
          "description": "Reference to BiometricDevice. (Relationship: BiometricDevice 1:1 Branch). This stores the device id of biometric device registered in this branch"
        }
      },
      "required": [
        "id",
        "clientId",
        "name",
        "location",
        "biometricDeviceId"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee. (PK)"
        },
        "branchId": {
          "type": "string",
          "description": "Reference to Branch. (Relationship: Branch 1:N Employee)"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the employee."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the employee."
        },
        "email": {
          "type": "string",
          "description": "Email address of the employee.",
          "format": "email"
        },
        "department": {
          "type": "string",
          "description": "Department the employee belongs to."
        },
        "employeeCode": {
          "type": "string",
          "description": "A unique code assigned to the employee."
        },
        "shiftStartTime": {
          "type": "string",
          "description": "The employees scheduled start time for their shift. Stored as HH:MM."
        },
        "shiftEndTime": {
          "type": "string",
          "description": "The employees scheduled end time for their shift. Stored as HH:MM."
        }
      },
      "required": [
        "id",
        "branchId",
        "firstName",
        "lastName",
        "email",
        "department",
        "employeeCode",
        "shiftStartTime",
        "shiftEndTime"
      ]
    },
    "BiometricDevice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BiometricDevice",
      "type": "object",
      "description": "Represents a biometric device connected to the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the biometric device. (PK)"
        },
        "branchId": {
          "type": "string",
          "description": "Reference to Branch. (Relationship: Branch 1:1 BiometricDevice)"
        },
        "deviceName": {
          "type": "string",
          "description": "Name of the biometric device."
        },
        "ipAddress": {
          "type": "string",
          "description": "IP address of the biometric device."
        },
        "port": {
          "type": "number",
          "description": "Port number used to connect to the biometric device."
        },
        "connectionKey": {
          "type": "string",
          "description": "The connection key used to authenticate with the biometric device."
        }
      },
      "required": [
        "id",
        "branchId",
        "deviceName",
        "ipAddress",
        "port",
        "connectionKey"
      ]
    },
    "AttendanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AttendanceRecord",
      "type": "object",
      "description": "Represents an attendance record for an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the attendance record. (PK)"
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N AttendanceRecord)"
        },
        "deviceId": {
          "type": "string",
          "description": "The Id of the device that registered the attendance record. Reference to BiometricDevice. (Relationship: BiometricDevice 1:N AttendanceRecord)"
        },
        "punchInTime": {
          "type": "string",
          "description": "Timestamp indicating when the employee punched in.",
          "format": "date-time"
        },
        "punchOutTime": {
          "type": "string",
          "description": "Timestamp indicating when the employee punched out.",
          "format": "date-time"
        },
        "attendanceDate": {
          "type": "string",
          "description": "The date for this attendance record, independent of the punch in/out times",
          "format": "date-time"
        },
        "logType": {
          "type": "string",
          "description": "The type of log uploaded (e.g. Manual Upload, Biometric Device, etc)"
        }
      },
      "required": [
        "id",
        "employeeId",
        "deviceId",
        "punchInTime",
        "attendanceDate"
      ]
    },
    "LeaveRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaveRequest",
      "type": "object",
      "description": "Represents a leave request submitted by an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the leave request. (PK)"
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N LeaveRequest)"
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the leave period.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the leave period.",
          "format": "date-time"
        },
        "reason": {
          "type": "string",
          "description": "Reason for the leave request."
        },
        "status": {
          "type": "string",
          "description": "Status of the leave request (e.g., pending, approved, rejected)."
        }
      },
      "required": [
        "id",
        "employeeId",
        "startDate",
        "endDate",
        "reason",
        "status"
      ]
    },
    "Notification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Notification",
      "type": "object",
      "description": "Represents a notification sent to an employee or administrator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the notification. (PK)"
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N Notification) If null, notification is for admin or HR"
        },
        "type": {
          "type": "string",
          "description": "Type of notification (e.g., late arrival, early arrival, overtime, audit summary)."
        },
        "message": {
          "type": "string",
          "description": "Content of the notification."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the notification was sent.",
          "format": "date-time"
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates whether the notification has been read."
        }
      },
      "required": [
        "id",
        "type",
        "message",
        "timestamp",
        "isRead"
      ]
    },
    "EmailLog": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EmailLog",
      "type": "object",
      "description": "Logs all sent emails for auditing and tracking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the email log. (PK)"
        },
        "recipient": {
          "type": "string",
          "description": "Email address of the recipient.",
          "format": "email"
        },
        "subject": {
          "type": "string",
          "description": "Subject of the email."
        },
        "body": {
          "type": "string",
          "description": "Content of the email (HTML)."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the email was sent.",
          "format": "date-time"
        },
        "emailType": {
          "type": "string",
          "description": "Type of email (e.g., late arrival, overtime, audit report)."
        }
      },
      "required": [
        "id",
        "recipient",
        "subject",
        "body",
        "timestamp",
        "emailType"
      ]
    },
    "AuditLog": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuditLog",
      "type": "object",
      "description": "Logs all audit activities performed in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the audit log. (PK)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the audit was performed.",
          "format": "date-time"
        },
        "auditorId": {
          "type": "string",
          "description": "The id of the user/system that triggered the audit."
        },
        "auditType": {
          "type": "string",
          "description": "Type of audit (e.g., daily, weekly, monthly)."
        },
        "summary": {
          "type": "string",
          "description": "Summary of the audit results."
        }
      },
      "required": [
        "id",
        "timestamp",
        "auditorId",
        "auditType",
        "summary"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client information. Root level collection for multi-tenancy.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}/branches/{branchId}",
        "definition": {
          "entityName": "Branch",
          "schema": {
            "$ref": "#/backend/entities/Branch"
          },
          "description": "Stores branch information for each client. Includes denormalized 'clientId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "branchId",
              "description": "The unique identifier for the branch."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}/branches/{branchId}/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee information for each branch. Includes denormalized 'clientId' and 'branchId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "branchId",
              "description": "The unique identifier for the branch."
            },
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}/branches/{branchId}/biometricDevices/{deviceId}",
        "definition": {
          "entityName": "BiometricDevice",
          "schema": {
            "$ref": "#/backend/entities/BiometricDevice"
          },
          "description": "Stores biometric device information for each branch. Includes denormalized 'clientId' and 'branchId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "branchId",
              "description": "The unique identifier for the branch."
            },
            {
              "name": "deviceId",
              "description": "The unique identifier for the biometric device."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}/branches/{branchId}/employees/{employeeId}/attendanceRecords/{attendanceRecordId}",
        "definition": {
          "entityName": "AttendanceRecord",
          "schema": {
            "$ref": "#/backend/entities/AttendanceRecord"
          },
          "description": "Stores attendance records for each employee. Includes denormalized 'clientId', 'branchId', and 'employeeId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "branchId",
              "description": "The unique identifier for the branch."
            },
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            },
            {
              "name": "attendanceRecordId",
              "description": "The unique identifier for the attendance record."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}/branches/{branchId}/employees/{employeeId}/leaveRequests/{leaveRequestId}",
        "definition": {
          "entityName": "LeaveRequest",
          "schema": {
            "$ref": "#/backend/entities/LeaveRequest"
          },
          "description": "Stores leave requests for each employee. Includes denormalized 'clientId', 'branchId', and 'employeeId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            },
            {
              "name": "branchId",
              "description": "The unique identifier for the branch."
            },
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            },
            {
              "name": "leaveRequestId",
              "description": "The unique identifier for the leave request."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/notifications/{notificationId}",
        "definition": {
          "entityName": "Notification",
          "schema": {
            "$ref": "#/backend/entities/Notification"
          },
          "description": "Stores notifications for each user. Path based ownership. Notifications specific to admins or HR do not have employeeId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "notificationId",
              "description": "The unique identifier for the notification."
            }
          ]
        }
      },
      {
        "path": "emailLogs/{emailLogId}",
        "definition": {
          "entityName": "EmailLog",
          "schema": {
            "$ref": "#/backend/entities/EmailLog"
          },
          "description": "Stores logs of all sent emails for auditing purposes.",
          "params": [
            {
              "name": "emailLogId",
              "description": "The unique identifier for the email log."
            }
          ]
        }
      },
      {
        "path": "auditLogs/{auditLogId}",
        "definition": {
          "entityName": "AuditLog",
          "schema": {
            "$ref": "#/backend/entities/AuditLog"
          },
          "description": "Stores logs of all audit activities performed in the system.",
          "params": [
            {
              "name": "auditLogId",
              "description": "The unique identifier for the audit log."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed for a multi-tenant, multi-branch biometric attendance system, prioritizing security and scalability. Multi-tenancy is achieved through a top-level `clients` collection, with each client having its own set of branches, employees, and associated data.  Authorization Independence is ensured by denormalizing client and branch IDs into all subcollections, removing the need for `get()` calls in security rules. For example, `employee` documents contain the `clientId` and `branchId`. Attendance records store `clientId`, `branchId` and `employeeId`.  This allows security rules to validate access based on the current user's role and the denormalized data within each document. Segregation is used to maintain a homogeneous security posture within collections.  For example, attendance records are stored in a dedicated collection, separate from other types of data, ensuring consistent access control rules.\n\nThe structure supports QAPs (Queries Are Permissions) through structural segregation and path-based ownership. List operations are secured because security rules can directly validate access based on the path and the user's authentication context.  For collaborative data, such as managing branch access, a membership map (`members`) could be used within the branch document if needed, though the current design primarily relies on path-based ownership and client/branch ID denormalization.\n\nThe design includes dedicated collections for audit logs and email logs to ensure data integrity and historical tracking. Notifications are user-specific and stored under the `users/{userId}/notifications` path, providing a secure and scalable way to manage user-specific alerts.\n\nThe database assumes path-based ownership for most data. `Client` owns `Branch` owns `Employee` owns `AttendanceRecord`."
  }
}